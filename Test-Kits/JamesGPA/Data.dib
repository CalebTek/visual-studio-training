#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

## Data Collection Class

#!markdown

Libraries

#!csharp

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Channels;
using System.Threading.Tasks;

#!markdown

Enumeration

#!csharp

public enum Grading
{
    F, 
    E,
    D,
    C,
    B,
    A
}

#!csharp

// test
Grading.A

#!markdown

Class and Methods

#!csharp

public class Data
{
    public string courseCode;
    public byte courseUnit;   
    public byte courseScore;
    public int weightPoint;
    public byte gradeUnit;
    public char grade;
    public string remark;

    public Data(ArrayList entries)
    {

        this.courseCode = Convert.ToString(entries[0]);
        this.courseUnit = Convert.ToByte(entries[1]);
        this.courseScore = Convert.ToByte(entries[2]);
        this.gradeUnit = GetGrade(courseScore);
        this.weightPoint = GetWeightedPoint(this.courseUnit, this.gradeUnit);
        this.grade = (char)(Grading)gradeUnit;


    }

    public int GetWeightedPoint(byte courseUnit, byte gradeUnit)
    {
        return  courseUnit * gradeUnit;
    }

    public byte GetGrade(byte courseScore)
    {
        switch (courseScore)
        {
            case byte score when (score is > 0 and < 40):
                this.remark = "Fail";
                return 0;
            case byte score when (score is > 39 and < 45):
                this.remark = "Pass";
                return 1;
            case byte score when (score is > 44 and < 50):
                this.remark = "Fair";
                return 2;
            case byte score when (score is > 49 and < 60):
                this.remark = "Good";
                return 3;
            case byte score when (score is > 59 and < 70):
                this.remark = "Very Good";
                return 4;
            case byte score when (score is > 69 and < 100):
                this.remark = "Excellent";
                return 5;
            default:
                return 0;

        }
    }
}

#!csharp

//test
Data mts101 = new Data()

#!markdown

Useful class from Progam.cs

#!csharp

//method receives data for each course
public static ArrayList GetCourseData()
{
    Console.Clear();
    var prompt = new string[3] { "Input Course Code: ", "Input Course Unit", "Input Course Score" };
    var allInput = new ArrayList();
    //var allInput = new string[3];

    for (int i = 0; i < prompt.Length; i++)
    {
        Console.WriteLine(prompt[i]);
        string input = Console.ReadLine();
        allInput.Add(input);
    }
    Console.Clear();

    return allInput;
}

#!csharp

// code breakdown
var prompt = new string[3] { "Input Course Code: ", "Input Course Unit: ", "Input Course Score: " };
var allInput = new ArrayList();
//prompt
allInput

#!csharp

string[] input = {"MTS101", "3", "4"};
for (int i = 0; i < prompt.Length; i++)
    {
        //Console.WriteLine(prompt[i]);
        //string input = Console.ReadLine();
        allInput.Add(input[i]);
    }
allInput

#!csharp

// not needed in test kit....
public static int GetCourseMax()
    {
        bool isInputValid = false;
        int value = 0; 
        while (!isInputValid)
        {
            Console.WriteLine("Enter number of courses: ");
            string maxCourse = Console.ReadLine();
            if (int.TryParse(maxCourse, out value))
            {
                isInputValid = true;
            }
        }

        return value;
    }

#!csharp

// Code from main program
//int maxCourse = GetCourseMax();
int maxCourse = 3;
//initialise array 
Data[] data = new Data[maxCourse];

string[] input = {"MTS101", "3", "40","MTS103", "2", "67","MTS101", "4", "94"};
//get and store user data
for (int i = 0; i < prompt.Length*maxCourse; i++)
{
    
    for (int j = 0; j < prompt.Length*maxCourse; j++)
        {
            //Console.WriteLine(prompt[i]);
            //string input = Console.ReadLine();
            allInput.Add(input[i]);
        }
    //var newEntry = GetCourseData();
    var newEntry = allInput;
    
    data[i] = new Data(newEntry);
}
